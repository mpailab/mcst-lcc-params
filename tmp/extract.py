import sys
import os
import re
import shutil

source_path = sys.argv[1]
dist_path = sys.argv[2]

parTable = {
    'ifconv_calls_num' :
        ("Целочисленный", "6", "Параметр задает максимальное число вызовов в слитом узле."),

    'ifconv_merge_heur' :
        ("Вещественный", "1,0", "Параметр задает верхнюю границу для отношения времени планирования слитого региона к взвешенной сумме времен планирования узлов региона, при котором допустимо его слияние в один узел."),

    'ifconv_opers_num' :
        ("Целочисленный", "200", "Параметр задает максимальное допустимое число операций в слитом узле."),

    'regn_disb_heur' :
        ("Целочисленный", "9", "Параметр задает минимальную разность между максимальной и минимальной высотой предшественников узла, которая позволяет считать узел несбалансированным."),

    'regn_heur_bal1' :
        ("Вещественный", "0,0", "Параметр задает максимальное значение отношения счетчика головы региона к наибольшему счетчику в процедуре, при котором возможно дублирование узла при несбалансированном схождении."),

    'regn_heur_bal2' :
        ("Вещественный", "0,0", "Параметр задает максимальное значение отношения счетчика узла во всей процедуре к наибольшему счетчику в процедуре, при котором возможно дублирование узла при несбалансированном схождении."),

    'regn_heur1' :
        ("Вещественный", "0,037", "Параметр устанавливает максимальное значение относительного счетчика узла, при котором узел заведомо не добавляется в набираемый регион."),

    'regn_heur2' :
        ("Вещественный", "0,06", "Параметр задает максимальное значение относительного счетчика узла с боковым вхождением, при котором узел заведомо не добавляется в набираемый регион."),

    'regn_heur3' :
        ("Вещественный", "0,03", "Параметр задает максимальное значение отношения внутреннего счетчика узла в регионе к его счетчику во всей процедуре, при котором узел заведомо не добавляется в набираемый регион."),

    'regn_heur4' :
        ("Вещественный", "0,0", "Параметр задает максимальное значение отношения внутреннего счетчика узла в регионе к наибольшему счетчику в процедуре, при котором узел заведомо не добавляется в набираемый регион."),

    'regn_max_proc_op_sem_size' :
        ("Целочисленный", "16000", "Параметр отражает максимальный размер процедуры, при котором допускается дублирование узлов в процессе набора регионов."),

    'regn_opers_limit' :
        ("Целочисленный", "2048", "Параметр задает максимальное допустимое число операций в регионе."),

    'regn_prob_heur' :
        ("Вещественный", "0,04", "Параметр задает минимальную относительную вероятность входной дуги короткой альтернативы несбалансированного схождения, при которой допускается дублирование.")
}

params = sorted(parTable.keys())

if not os.path.exists(dist_path):
    os.makedirs(dist_path)

def desc (p):
    return "{:>3} : {:>1}".format(param[0], param[1])

with open(dist_path + "/rows.txt", 'w') as f:
    f.write("\n".join(map(lambda x:
        "{:>3} : {:>1}\n".format(x[0] + 1, x[1]) +
        "      Тип - {:>1}\n".format(parTable[x[1]][0]) +
        "      Значение по умолчанию - {:>1}\n".format(parTable[x[1]][1]) +
        "      Описание - {:>1}\n".format(parTable[x[1]][2]), enumerate(params))))

values = {}
for spec in os.listdir(source_path):
    if spec != 'all_tasks':
        values[spec] = dict(map(lambda x: (x,[]), params))
        for dir in os.listdir(source_path + '/' + spec):
            for file in os.listdir(source_path + '/' + spec + '/' + dir):
                p  = file.split('.')[0]
                with open(source_path + '/' + spec + '/' + dir + '/' + file) as f:
                    if int(dir) < 20181221:
                        q = re.findall('.*:([0-9.\-e]*)"[ \n]*#([0-9.]*) *([0-9.]*) *([0-9.]*)', f.read())
                    elif int(dir) < 20190101:
                        q = re.findall('.*:([0-9.\-e]*)"[ \n]*#([0-9.]*) *([0-9.]*) *([0-9.]*)', f.read())
                    else:
                        q = list(map(lambda x: (x[0],x[1],x[3],x[2]), re.findall('.*:([0-9.\-e]*)"[ \n]*comp_time#([0-9.]*)\n.*\n.*\nmax_mem#([0-9.]*)[ \n]*exec_time#([0-9.]*)', f.read())))
                    values[spec][p].extend(map(lambda x: (x[0], str(float(x[1])/float(q[0][1])),
                                                                str(float(x[2])/float(q[0][2])),
                                                                str(float(x[3])/float(q[0][3]))), q[1:]))

    else:
        for dir in os.listdir(source_path + '/' + spec):
            for file in os.listdir(source_path + '/' + spec + '/' + dir):
                p  = file.split('.')[0]
                with open(source_path + '/' + spec + '/' + dir + '/' + file) as f:
                    q = re.findall('(?=/auto/bokov_g/msu/bin/run_comp.sh ([0-9.a-z]*).*:([0-9.]*)"[ \n]*comp_time#([0-9.]*)\n[\s\S]*?(?=max_mem)max_mem#([0-9.]*)\n[\s\S]*?(?=exec)exec_time#([0-9.]*)\n)', f.read())
                    # print(q)
                    r = {}
                    for x in q:
                        if x[0] in r:
                            r[x[0]].append((x[1],x[2],x[4],x[3]))
                        else:
                            r[x[0]] = [(x[1],x[2],x[4],x[3])]
                    for k in r:
                        values[k][p].extend(map(lambda x: (x[0], str(float(x[1])/float(r[k][0][1])),
                                                                 str(float(x[2])/float(r[k][0][2])),
                                                                 str(float(x[3])/float(r[k][0][3]))), r[k][1:]))

for spec in values:
    with open(dist_path + '/' + spec + '.txt', 'w') as f:
        f.write("\n".join(map(lambda p: ' '.join(map(lambda x: ':'.join(x), values[spec][p])), params)))
